load "math.forge"
load "finance.forge"
load "conversions.forge"


print("=== FORGE LANGUAGE FEATURE TEST ===")


print("\n--- Variables & Types ---")
let x = 42
let r = "Hello my name is patrick"
let h = hash(r)
print(h)
let name = "Forge"
let isCool = true
let nothing = 0
print("x:", x, "name:", name, "isCool:", isCool, "nothing:", nothing)

print("\n--- Arithmetic & Logic ---")
let sum = x + 8
let isEqual = (x == 50)
let isNot = !isEqual
print("Sum:", sum, "Is 50?", isEqual, "Not equal?", isNot)

print("\n--- Lists & Arrays ---")
let things = @()
things.add("apple")
things.add("banana")
things.remove("banana")
print("List:", things)
print(len(things))

let arr = [1, 2, 3]
print("Array[0]:", arr[0])

print("\n--- Structs ---")
struct User{
    name: str
    age: int
}

let user = User("Patrick", 21)
print("User:", user.name, user.age)

print("\n--- Functions ---")
fn greet(who: string) -> string {
    return "Hello, " + who
}

print(greet("Forge"))

fn add(a, b) -> number {
    return a + b
}
print("add(2, 3):", add(2, 3))

fn calculateScore() -> number {
    return 100
}

print("\n--- Conditionals ---")
if x > 40 {
    print("x is big")
} else {
    print("x is small")
}

print("\n--- Loops ---")
for let i = 0; i < 5; i++ {
    print("i =", i)
}

print("\n--- While Loops ---")
let countdown = 3
while countdown > 0 {
    print("Countdown:", countdown)
    countdown = countdown - 1
}

print("\n--- Error Handling: Block ---")
attempt {
    let fail = number("oops")
} rescue err {
    print("Caught error:", err)
}

print("\n--- Error Handling: Expression ---")
let safeNumber = attempt number("nope") rescue 999
print("Safe number is", safeNumber)

print("\n--- Nested Try Inside Loop ---")
for let i = 0; i < 3; i++ {
    attempt {
        if i == 1 {
            let fail = number("bad")
        } else {
            print("Safe index:", i)
        }
    } rescue e {
        print("Error at i =", i, ":", e)
    }
}

print("\n--- Struct Inside Function ---")
fn makeUser(name, age) -> User {
    return User(name, age)
}

let newUser = makeUser("Ada", 99)
print("makeUser ->", newUser.name, newUser.age)

let a = 123
let b = 456

let aStr = string(a)
let bStr = string(b)

print("aStr is: " + aStr)
print("bStr is: " + bStr)

let combined = aStr + bStr
print("Combined: " + combined)

# Bonus: index into string
print("First char of aStr: " + aStr[0])
print("Second char of bStr: " + bStr[1])

for let i = 0; i < 5; i++ {
    print("i =", i)
    if i == 2 {
        break
    }
}
write("log.txt", "Session Start", 2)
addto("log.txt", "Step 1", 1)
addto("log.txt", "Step 2", 1)
addto("log.txt", "Done!", 0)
read("log.txt")

print("\n--- File Read + Assignment + Print ---")
let content = read("log.txt")
print("Log Contents:\n" + content)


print("\n--- Boolean Logic ---")
let a = true
let b = false
print("a && b:", a && b)
print("a || b:", a || b)
print("!a:", !a)


print("\n--- Decimal Precision ---")
let precise = 10.12345
let total = precise * 3
print("Decimal Total:", total)




print("\n--- Write and Read Back ---")
write("temp.txt", "temporary content", 1)
let check = read("temp.txt")
print("Temp file says:", check)

print("\n--- Expression in Condition ---")
if string(123) == "123" {
    print("String conversion in if works!")
}




print("\n--- Import Testing ---")
let x = math.add(10, 5)
let y = math.sqrt(x)
let z = math.divide(y, 3)

print("x:", x)
print("y:", y)
print("z:", z)

print ("\n---Negative of 5---")
print(math.neg(5))

print("\n--- 4 Squared ---")
print(math.squared(4))

print("\n--- Factorial of 5 ---")
print(math.fact(5))

print("\n--- Square root of 4 ---")
print(math.sqrt(46))
print("\n--- Is 4 prime ---")
print(46 % 2)  # Should be 0
print(math.is_prime(46))
print("\n--- Done! All features tested. ---")
fn test() -> bool {
    print("before return")
    return false
    print("after return")
}

print("Result:", test())
fn bool_test() {
    return false
}
print(true)
print(bool_test())

print("\n--- Mod Test of 10 / 7 ---")
print(math.mod(10,4))



print("\n--- Finance Module Tests ---")

# Simple Interest
let si = finance.simple_interest(1000, 5, 3)   # 150
print("Simple Interest:", si)

# Compound Interest
let ci = finance.compound_interest(1500, 0.043, 6, 4)  # ~1938.83
print("Compound Interest:", ci)

# Monthly Payment
let mp = finance.monthly_payment(200000, 0.05, 30)  # ~1073.64
print("Monthly Payment:", mp)

# Percent Change
let pc = finance.percentage_change(120, 150)  # 25%
print("Percent Change:", pc)

# ROI
let r = finance.roi(200, 100)  # 100%
print("Return on Investment:", r)


print("\n--- Tier 1 Finance Tests ---")
print("Neg test:", -0.99)

print("Future Value (1000 @ 5% for 5y):", finance.future_value(1000, 0.05, 5))
print("Present Value (2000 in 3y @ 7%):", finance.present_value(2000, 0.07, 3))

let flows = [ math.neg(1000), 300, 400, 500 ]
print("NPV @ 10%:", finance.npv(0.10, flows))
print("IRR of cashflows:", finance.irr(flows))
print("Payback period:", finance.payback_period(flows))
print("Break-even (5000 fixed, $15/unit sold, $5 variable):", finance.break_even(5000, 5, 15))

print("\n--- Tier 2 Finance Tests ---")
print("Gross Margin (10000 rev, 4000 cogs):", finance.gross_margin(10000, 4000))
print("EBITDA (12000 rev, 7000 expenses):", finance.ebitda(12000, 7000))
print("Straight-Line Depreciation (10000, 1000, 5y):", finance.depreciation_sl(10000, 1000, 5))
print("Declining Balance Depreciation:", finance.depreciation_dd(10000, 0.2, 3))
print("Working Capital (assets 15000, liabilities 6000):", finance.working_capital(15000, 6000))
print("Debt-to-Equity Ratio (12000 debt, 4000 equity):", finance.debt_to_equity(12000, 4000))

print("\n--- Tier 3 Finance Tests (Compact Names) ---")

print("CAGR (1000 -> 2000 in 5y):", finance.cagr(1000, 2000, 5))
print("DSCR (NOI 15000, Debt 10000):", finance.dscr(15000, 10000))
print("COCR (5000 CF, 40000 Invest):", finance.cocr(5000, 40000))
print("Amortize (100k @5% for 30y):", finance.amortize(100000, 0.05, 30))
print("Break-Even Rev (5k fixed, 40% margin):", finance.ber(5000, 40))

print("\n--- Math: Floor / Ceil / Round ---")
print("Floor 3.9:", math.floor(3.9))         # 3
print("Floor -3.9:", math.floor(-3.9))       # -4
print("Ceil 2.1:", math.ceil(2.1))           # 3
print("Ceil -2.1:", math.ceil(-2.1))         # -2
print("Round 1.61803 to 2:", math.round(1.61803, 2))  # 1.62
print("Round 9.999 to 0:", math.round(9.999, 0))      # 10

print("\n--- Monte Carlo Simulation ---")
let sims = finance.monte_carlo(1000, 0.07, 0.15, 10, 100)
print("Simulated 100 paths. First 5 ending values:")
print(math.round(sims[0],3))
print(sims[1])
print(sims[2])
print(sims[3])
print(sims[4])


print(finance.format_money(2574.564339))  # â†’ $2574.56

print("\n--- Monte Carlo: Full Report ---")
let sims = finance.monte_carlo(1000, 0.07, 0.15, 10, 100)
finance.monte_report(sims)

print("Success Rate (>$2000):", math.round(finance.success_rate(sims, 2000), 2), "%")






print("\n--- Conversion ---")

print("10 Miles to KM", conversions.mtkm(6.213710000000000066577854341))
print("10 KM to miles", conversions.kmtm(10))
print("10 pounds to KG", conversions.lbkg(10))
print("10 kg to pounds", conversions.kglb(10))












