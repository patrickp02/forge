load "math.forge"

#Tax Module 


fn calc_tax(income, brackets: list ) {
    let tax = 0

    for let i = 0; i < len(brackets); i++ {
        let lower = brackets[i][0]
        let rate = brackets[i][1]

        let upper = 999999999
        if i + 1 < len(brackets) {
            upper = brackets[i + 1][0]
        }

        if income > lower {
            let cap = income
            if upper < income {
                cap = upper
            }

            let taxable = cap - lower
            if taxable > 0 {
                let slice_tax = taxable * rate
                tax = tax + slice_tax
            }
        }
    }

    return tax
}


fn effective_rate(income, brackets) {
    let tax = calc_tax(income, brackets)
    return (tax / income) * 100
}

fn marginal_rate(income, brackets) {
    let rate = 0
    for let i = 0; i < len(brackets); i++ {
        if i + 1 < len(brackets) {
            if income >= brackets[i][0] && income < brackets[i + 1][0] {
                rate = brackets[i][1]
                break
            }
        } else {
            # Income is above all brackets â†’ use last bracket
            rate = brackets[i][1]
        }
    }
    return rate * 100
}





